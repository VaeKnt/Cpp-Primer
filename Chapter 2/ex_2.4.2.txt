Exercise 2.27:
a) int i = -1, &r = 0; Illegal due to 0 not being an object
b) int *const p2 = &i2;  Legal, a const pointer to an object of int type
c) const int i = -1, &r = 0; legal due to 0 being a const => r is a referenc e to a const
d) const int *const p3 = &i2;  Legal, p3 is a constant pointer to an object  of type int
e) const int *p1 = &i2; Legal, p1 is a pointer to a const int
f) const int &const r2; Illegal, references must be initialized
g) const int i2 = i, &r = i; Legal 

Exercise 2.28:
a) int i, *const cp; Illegal, cp is a constant pointer, hence an object and  like any other const object, must be initialized
b) int *p1, *const p2; Same as (a)
c) const int ic, &r = ic; Illegal, ic is const hence must be initialized
d) const int *const p3; Illegal, must be initialized
e) const int *p; Legal p is a pointer to const int and not itself a const and thus doesn't have to be initialized.

Exercise 2.29:
a) i = ic; Legal since i is just type int and thus can be changed.
b) p1 = p3; Illegal,types don't match 
c) p1 = &ic; Illegal, types don't match
d) p3 = &ic; Illegal, p3 is a const ptr
e) p2 = p1; Illegal, p2 is a const ptr
f) ic = *p3; Illegal, ic is a const int
